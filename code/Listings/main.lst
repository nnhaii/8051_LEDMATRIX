C51 COMPILER V9.60.0.0   MAIN                                                              06/09/2023 01:35:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1            /******************************************************************************
   2            * Ten tep:    delay.h
   3            * Tac gia:    Nguyen Nam Hai
   4            * Ngay:       01-04-2023
   5            ******************************************************************************/
   6          #include <main.h>
   7          
   8          #include "i2c.h"
   9          
  10          
  11          void Send_data_cot(unsigned int _data);
  12          void Send_data_cot_1(unsigned int _data);
  13          void DISPLAY_1(unsigned char d[8], unsigned char r[16]);
  14          void DISPLAY_2(unsigned char d[8], unsigned char r[16]);
  15          //===========================dinh nghia cac chan vao ra======================//
  16          sbit SH_CP = P0^0; //dinh nghia chan SH_CP o P0^0
  17          sbit DS = P0^1; //dinh nghia chan DS o P0^1
  18          sbit ST_CP = P0^2; //dinh nghia chan ST_CP o P0^2
  19          
  20          sbit SH_CP_1 = P0^4; //dinh nghia chan SH_CP o P0^0
  21          sbit DS_1 = P0^6; //dinh nghia chan DS o P0^1
  22          sbit ST_CP_1 = P0^5; //dinh nghia chan ST_CP o P0^2
  23          //============================khai bao bien va hang==========================//
  24          unsigned char t_h[16], t_m[16];
  25          unsigned int b[16] = {
  26            0x0001, 0x0002, 0x0004, 0x0008, 
  27            0x0010, 0x0020, 0x0040, 0x0080, 
  28            0x0100, 0x0200, 0x0400, 0x0800, 
  29            0x1000, 0x2000, 0x4000, 0x8000
  30          };
  31          unsigned char i = 0, k = 0, j = 0;
  32          unsigned char sec, min, hour, day, month, year;
  33          //============================DS1307==========================//
  34          #define DS1307_SEC 0x00 //Giay
  35          #define DS1307_MIN 0x01 //Phut
  36          #define DS1307_HOUR 0x02 //Gio
  37          #define DS1307_DAY 0x03 //Thu
  38          #define DS1307_DATE 0x04 //Ngay
  39          #define DS1307_MONTH 0x05 //Thang
  40          #define DS1307_YEAR 0x06 //Nam
  41          
  42          
  43          //void DS1307_Write(unsigned char addr, unsigned char dat) {
  44          //  unsigned int temp;
  45          //  temp = dat; /*HEX to BCD*/
  46          //  dat = (((dat / 10) * 16) | (temp % 10)); /*for Led 7seg*/
  47          //  I2C_time_start(); /* time_start i2c bus */
  48          //  I2C_write(0XD0); /* Connect to DS1307 */
  49          //  I2C_write(addr); /* Requetime_5 RAM address on DS1307 */
  50          //   I2C_write(dat);
  51          //  I2C_time_stop();
  52          //}
  53          unsigned char DS1307_Read(unsigned char addr) {
  54   1        unsigned int tm, ret;
C51 COMPILER V9.60.0.0   MAIN                                                              06/09/2023 01:35:36 PAGE 2   

  55   1        I2C_time_start(); /* time_start i2c bus */
  56   1        I2C_write(0xD0); /* Connect to DS1307 */
  57   1        I2C_write(addr); /* Requetime_5 RAM address on DS1307 */
  58   1        I2C_time_start(); /* time_start i2c bus */
  59   1        I2C_write(0XD1); /* Connect to DS1307 for Read */
  60   1        ret = I2C_read(); /* Receive data */
  61   1        I2C_time_stop();
  62   1        tm = ret; /*BCD to HEX*/
  63   1        ret = (((ret / 16) * 10) + (tm & 0x0f)); /*for Led 7seg*/
  64   1        return ret;
  65   1      }
  66          /*
  67          void DS1307_Set() {
  68            //Ghi du lieu ngay gio vao DS1307
  69            DS1307_Write(DS1307_SEC, sec);
  70            DS1307_Write(DS1307_MIN, min);
  71            DS1307_Write(DS1307_HOUR, hour);
  72            DS1307_Write(DS1307_DATE, day);
  73            DS1307_Write(DS1307_MONTH, month);
  74            DS1307_Write(DS1307_YEAR, year);
  75          }
  76          */
  77          void DS1307_GetTime() {
  78   1        //Doc du lieu gio tu DS1307
  79   1        hour = DS1307_Read(DS1307_HOUR);
  80   1        min = DS1307_Read(DS1307_MIN);
  81   1        sec = DS1307_Read(DS1307_SEC);
  82   1      }
  83          /*
  84          void DS1307_GetDate() {
  85            //Doc du lieu ngay tu DS1307
  86            day = DS1307_Read(DS1307_DATE);
  87            month = DS1307_Read(DS1307_MONTH);
  88            year = DS1307_Read(DS1307_YEAR);
  89          }
  90          */
  91          //End code DS1307
  92          
  93          //============================HAM MAIN=======================================//
  94          int main() {
  95   1      
  96   1        // Initialize I2C communication
  97   1        DS1307_GetTime();
  98   1        while (1) {
  99   2          hour = DS1307_Read(DS1307_HOUR);
 100   2          min = DS1307_Read(DS1307_MIN);
 101   2      
 102   2          DISPLAY_1(so[hour / 10], t_h);
 103   2          DISPLAY_2(so[hour % 10], t_h);
 104   2          DISPLAY_1(so[min / 10], t_m);
 105   2          DISPLAY_2(so[min % 10], t_m);
 106   2      
 107   2          for (i = 0; i < 16; i++) //quet COT thu 1 den thu 16, cho COT=0 roi goi du lieu ra cot do
 108   2          {
 109   3            P2 = t_h[i]; // goi du kieu ra hang 1->8
 110   3            P1 = t_m[i];
 111   3            Send_data_cot(b[i]); //quet cot
 112   3            Send_data_cot_1(b[i]);
 113   3            delay_ms(1); //thoi gian quet
 114   3            Send_data_cot(0x0000); //tat het led chong lem
 115   3            Send_data_cot_1(0x0000);
 116   3          }
C51 COMPILER V9.60.0.0   MAIN                                                              06/09/2023 01:35:36 PAGE 3   

 117   2        }
 118   1      }
 119          
 120          void Send_data_cot(unsigned int _data) {
 121   1        unsigned char n;
 122   1        unsigned int tam;
 123   1      
 124   1        ST_CP = 0; //cho chan ST cua 74HC595 xuong muc 0
 125   1        SH_CP = 0; //cho chan SH cua 74HC595 xuong muc 0
 126   1        DS = 0; //cho chan DS cua 74HC595 xuong muc 0
 127   1        for (n = 0; n < 16; n++) //goi 16 bit lan luoc ra 16 cot
 128   1        {
 129   2          tam = _data & 0x8000;
 130   2          _data = _data << 1; //dich trai 1 bit de goi bit can goi ra  cot      
 131   2      
 132   2          if (tam == 0x8000) //goi bit cao ra truoc(bit o cot thu 8 truoc)
 133   2          {
 134   3            DS = 1; // cho LED sang COT =1
 135   3          } else {
 136   3            DS = 0; //cho LED tat COT =0
 137   3          }
 138   2          //tao xung dich du lieu   
 139   2          SH_CP = 1;
 140   2          SH_CP = 0;
 141   2        }
 142   1        //tao xung chot du lieu
 143   1        ST_CP = 1;
 144   1        ST_CP = 0;
 145   1      }
 146          
 147          void Send_data_cot_1(unsigned int _data) {
 148   1        unsigned char n;
 149   1        unsigned int tam;
 150   1      
 151   1        ST_CP_1 = 0; //cho chan ST cua 74HC595 xuong muc 0
 152   1        SH_CP_1 = 0; //cho chan SH cua 74HC595 xuong muc 0
 153   1        DS_1 = 0; //cho chan DS cua 74HC595 xuong muc 0
 154   1        for (n = 0; n < 16; n++) //goi 16 bit lan luoc ra 16 cot
 155   1        {
 156   2          tam = _data & 0x8000;
 157   2          _data = _data << 1; //dich trai 1 bit de goi bit can goi ra  cot      
 158   2      
 159   2          if (tam == 0x8000) //goi bit cao ra truoc(bit o cot thu 8 truoc)
 160   2          {
 161   3            DS_1 = 1; // cho LED sang COT =1
 162   3          } else {
 163   3            DS_1 = 0; //cho LED tat COT =0
 164   3          }
 165   2          //tao xung dich du lieu   
 166   2          SH_CP_1 = 1;
 167   2          SH_CP_1 = 0;
 168   2        }
 169   1        //tao xung chot du lieu
 170   1        ST_CP_1 = 1;
 171   1        ST_CP_1 = 0;
 172   1      }
 173          
 174          void DISPLAY_1(unsigned char d[8], unsigned char r[16]) {
 175   1        unsigned char j;
 176   1        for (j = 0; j < 8; j++) {
 177   2          r[j] = d[j];
 178   2        }
C51 COMPILER V9.60.0.0   MAIN                                                              06/09/2023 01:35:36 PAGE 4   

 179   1      }
 180          
 181          void DISPLAY_2(unsigned char d[8], unsigned char r[16]) {
 182   1        unsigned char j;
 183   1        for (j = 0; j < 8; j++) {
 184   2          r[j + 8] = d[j];
 185   2        }
 186   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    541    ----
   CONSTANT SIZE    =     80    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     73      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
